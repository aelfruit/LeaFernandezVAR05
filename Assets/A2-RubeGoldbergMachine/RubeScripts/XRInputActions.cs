//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/RubeGoldbergMachine/RubeScripts/XRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInputActions"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""4a2ad005-dfdf-43b2-9b10-0964d13b5634"",
            ""actions"": [
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""d9516a63-6530-4d0f-a6a8-266c689fe479"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""c90f6332-6575-4fff-bc44-6bbd897d4cca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoystickLeft"",
                    ""type"": ""Value"",
                    ""id"": ""d124b1a2-adfb-46ec-a7da-3b503a32d408"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoystickRight"",
                    ""type"": ""Value"",
                    ""id"": ""ba1ff782-6871-45dc-b6fe-e2ab51535d52"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""a136b65d-9f94-410f-8a2f-ebc36797eb40"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Button"",
                    ""id"": ""bd8e44da-924d-421e-9aed-a32d19707ec8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4600f937-87a2-4a14-8324-6803d3f1cb61"",
                    ""path"": ""<OculusTouchController>/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcf2ceff-a35e-4bbd-b9b0-884b57292bb4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d88cc448-1ae7-4974-8ce2-1458df46b90a"",
                    ""path"": ""<OculusTouchController>/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96a5ed67-64b2-4754-a31c-e9e1e522ff24"",
                    ""path"": ""<OculusTouchController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""daaf383c-35f9-49b2-ad7a-0c97bdcab86a"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eb3fcf6-4de1-42b3-8178-86bb79cc77d0"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cf971dc-a0a5-42e2-854f-b4e54b92ef8e"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d29f7b35-2127-4c85-a487-079cbebd4db7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f10cbc04-1d40-4c08-bf38-e21674560e4b"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_Primary = m_Default.FindAction("Primary", throwIfNotFound: true);
        m_Default_Joystick = m_Default.FindAction("Joystick", throwIfNotFound: true);
        m_Default_JoystickLeft = m_Default.FindAction("JoystickLeft", throwIfNotFound: true);
        m_Default_JoystickRight = m_Default.FindAction("JoystickRight", throwIfNotFound: true);
        m_Default_RightTrigger = m_Default.FindAction("RightTrigger", throwIfNotFound: true);
        m_Default_LeftTrigger = m_Default.FindAction("LeftTrigger", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_Primary;
    private readonly InputAction m_Default_Joystick;
    private readonly InputAction m_Default_JoystickLeft;
    private readonly InputAction m_Default_JoystickRight;
    private readonly InputAction m_Default_RightTrigger;
    private readonly InputAction m_Default_LeftTrigger;
    public struct DefaultActions
    {
        private @XRInputActions m_Wrapper;
        public DefaultActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Primary => m_Wrapper.m_Default_Primary;
        public InputAction @Joystick => m_Wrapper.m_Default_Joystick;
        public InputAction @JoystickLeft => m_Wrapper.m_Default_JoystickLeft;
        public InputAction @JoystickRight => m_Wrapper.m_Default_JoystickRight;
        public InputAction @RightTrigger => m_Wrapper.m_Default_RightTrigger;
        public InputAction @LeftTrigger => m_Wrapper.m_Default_LeftTrigger;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @Primary.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPrimary;
                @Primary.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPrimary;
                @Primary.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnPrimary;
                @Joystick.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystick;
                @Joystick.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystick;
                @Joystick.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystick;
                @JoystickLeft.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystickLeft;
                @JoystickLeft.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystickLeft;
                @JoystickLeft.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystickLeft;
                @JoystickRight.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystickRight;
                @JoystickRight.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystickRight;
                @JoystickRight.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnJoystickRight;
                @RightTrigger.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightTrigger;
                @RightTrigger.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightTrigger;
                @RightTrigger.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnRightTrigger;
                @LeftTrigger.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftTrigger;
                @LeftTrigger.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftTrigger;
                @LeftTrigger.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnLeftTrigger;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
                @Joystick.started += instance.OnJoystick;
                @Joystick.performed += instance.OnJoystick;
                @Joystick.canceled += instance.OnJoystick;
                @JoystickLeft.started += instance.OnJoystickLeft;
                @JoystickLeft.performed += instance.OnJoystickLeft;
                @JoystickLeft.canceled += instance.OnJoystickLeft;
                @JoystickRight.started += instance.OnJoystickRight;
                @JoystickRight.performed += instance.OnJoystickRight;
                @JoystickRight.canceled += instance.OnJoystickRight;
                @RightTrigger.started += instance.OnRightTrigger;
                @RightTrigger.performed += instance.OnRightTrigger;
                @RightTrigger.canceled += instance.OnRightTrigger;
                @LeftTrigger.started += instance.OnLeftTrigger;
                @LeftTrigger.performed += instance.OnLeftTrigger;
                @LeftTrigger.canceled += instance.OnLeftTrigger;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    public interface IDefaultActions
    {
        void OnPrimary(InputAction.CallbackContext context);
        void OnJoystick(InputAction.CallbackContext context);
        void OnJoystickLeft(InputAction.CallbackContext context);
        void OnJoystickRight(InputAction.CallbackContext context);
        void OnRightTrigger(InputAction.CallbackContext context);
        void OnLeftTrigger(InputAction.CallbackContext context);
    }
}
